tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - modules/openstack/openstack_vm.yaml
  - modules/docker/docker_host.yaml
  - modules/docker/docker_network.yaml
  - modules/docker/docker_registry.yaml
  - modules/docker/docker_component.yaml

topology_template:

  inputs:
    ssh-key-name:  
      type: string
    vm-name:
      type: string
    image-name:  
      type: string 
    openstack-network-name:  
      type: string 
    security-groups:  
      type: string    
    flavor-name:  
      type: string                   
    docker-network: 
      type: string
    docker-public-registry-url: 
      type: string
    docker-registry-cert-country-name:
      type: string
      default: ""
    docker-registry-cert-organization-name:
      type: string
      default: ""
    docker-registry-cert-email-address:
      type: string
      default: ""
    pds_env:
      type: map
    ssh_config:
      type: map

  node_templates: 

    security-rules-sodalite:
      type: sodalite.nodes.OpenStack.SecurityRules
      properties:
        ports:
          pds_port:
            port_range_max: 8089
            remote_ip_prefix: 0.0.0.0/0
            port_range_min: 8089
            protocol: tcp
        group_name:  sodalite-uc
        group_description:  Sodalite UC security group

    sodalite-vm:  
      type: sodalite.nodes.OpenStack.VM 
      properties:  
        name:             { get_input: vm-name }
        key_name:         { get_input: ssh-key-name } 
        image:            { get_input: image-name }
        network:          { get_input: openstack-network-name } 
        security_groups:  { get_input: security-groups } 
        flavor:           { get_input: flavor-name }
        ssh_config:       { get_input: ssh_config }
        username: centos
      requirements:
        - protected_by: security-rules-sodalite

    docker-host:
      type: sodalite.nodes.DockerHost
      requirements:
        - host: sodalite-vm

    docker-network:
      type: sodalite.nodes.DockerNetwork
      properties:  
        name: { get_input: docker-network }
      requirements:
        - host: sodalite-vm 
        - dependency: docker-host    
        
    docker-public-registry:
      type: sodalite.nodes.DockerRegistry
      properties:  
        docker_registry_url: { get_input: docker-public-registry-url } 
      requirements:
        - host: sodalite-vm
        - dependency: docker-host

    # platform-discovery-service
    # https://github.com/SODALITE-EU/platform-discovery-service
    platform-discovery-service:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: pds
        docker_network_name: { get_property: [ SELF, network, name ] }
        image_name: sodaliteh2020/platform-discovery-service
        restart_policy: always
        ports: [ '8089:8081' ]
        env: { get_input: pds_env }
      requirements:
        - host: docker-host
        - network: docker-network
        - registry: docker-public-registry
